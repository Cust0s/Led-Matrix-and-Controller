#ifndef includes_h
#define includes_h

#include <LiquidCrystalFast.h>
#include <FastLED.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>

//fonts
#include <Fonts/FreeSans9pt7b.h>

#include "Arduino.h"


//---Slide potentiometers---
#define RED A1
#define GREEN A6
#define BLUE A7
#define SPEED A8
#define AUX5 A2
#define BRIGHTNESS A9

#define FADER1 A1
#define FADER2 A6
#define FADER3 A7
#define FADER4 A8
#define FADER5 A2
#define FADER6 A9

//---Switches---
#define TOP_SWITCH 31
#define BOTTOM_SWITCH 32
//initially set to duplicate
bool switchPos = false;

//---LED matrix setup

#define NUM_MATRICES 4
#define NUM_LEDS_PER_MATRIX 100
#define NUM_LEDS 400
int W_AND_H = 10;

#define MATRIX_PIN1 6
#define MATRIX_PIN2 7
#define MATRIX_PIN3 8
#define MATRIX_PIN4 9


int FPS = 1000/30;
CRGB leds[NUM_LEDS];  //array that holds the led data
//animation related variables
int counter = 0;
int counter2 = 0;
int counter3 = 0;

//---OLED Displays---
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     5 // Reset pin # (or -1 if sharing Arduino reset pin)

Adafruit_SSD1306 display1;
Adafruit_SSD1306 display2;
Adafruit_SSD1306 display3;

//---Rotary encoder setup---
#define ENCODER_PIN_A 33
#define ENCODER_PIN_B 34
#define ENCODER_BUTTON 35

volatile byte reading = 0; //somewhere to store the direct values we read from our interrupt pins before checking to see if we have moved a whole detent
volatile byte sum = 0;

//---Menu---

#define MENU_SIZE 13 //the number of items in the menu
byte menuPosition = 0;  //the current first item of the menu
byte selectedItem = 0;  //the current selected item
String temp = "";

//Strings have to be max 13 chars long!
//Remember to add the animation to the animation switch case!
String menu[MENU_SIZE] = {
  " Twinkle RGB",
  " Twinkle Rand",
  " Twinkle Hue",
  " Hue Change",
  " Each Pixel",
  " Diagonal1",
  " Diagonal2",
  " Diagonal3",
  " Diagonal4",
  " Dead Channel",
  " Solid Pulse",
  " Hue Pulse",
  " test"
};

/*String menu[MENU_SIZE] = {
  "a1",
  "a2",
  "a3",
  "a4",
  "a5",
  "a6",
  "a7",
  "a8",
  "a9",
  "a10",
  "a11",
  "a12",
  "a13"
};*/

uint8_t gHue = 0;
//custom characters

//arrow pointing top right
byte arrowTopRight[] = {
  B00000,
  B11111,
  B00111,
  B01111,
  B11101,
  B11001,
  B00000,
  B00000
};

//arrow pointing bottom right
byte arrowBottomRight[] = {
  B00000,
  B00000,
  B11001,
  B11101,
  B01111,
  B00111,
  B11111,
  B00000
};

//arrow pointing bottom left
byte arrowBottomLeft[] = {
  B00000,
  B00000,
  B10011,
  B10111,
  B11110,
  B11100,
  B11111,
  B00000
};

//arrow pointing top left
byte arrowTopLeft[] = {
  B00000,
  B00000,
  B11111,
  B11100,
  B11110,
  B10111,
  B10011,
  B00000
};


//---First iteration counters---
bool firstIterColor = true;
bool firstIterAnim = true;
bool firstIterExtend = true;
bool firstIterDuplicate = true;

//---FPS counter---
long timeStamp1 = 0;
long timeStamp2 = 0;




unsigned long pictureFrame[] = {
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccccc, 0xffcccc, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccccc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffcc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xffcccc, 0xcccc99, 0xcccc99, 0x999999, 0xffffff, 0xffffff, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x999999, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccccc, 0x999999, 0x666666, 0x999999, 0x999999, 0xcccccc, 0xcccccc, 0x3366cc, 0x3366cc, 0x999999, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0x666666, 0x666666, 0x666666, 0x666666, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x999999, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0x999999, 0x666666, 0x666666, 0x0066cc, 0x3366cc, 0x666666, 0x0066cc, 0x666666, 0x666666, 0x666666, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0x666666, 0x3366cc, 0x0066cc, 0x0066cc, 0x666666, 0x666666, 0x666666, 0x666666, 0x0066cc, 0x666666, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0x999999, 0x3366cc, 0x0066cc, 0x3366cc, 0x0066cc, 0x0066cc, 0x666666, 0x666666, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0x999999, 0xcccccc, 0xcccccc, 0xffffff, 0xffffff, 0xcccccc, 0xcccc99, 0xcccc99, 0x999999, 0x999999, 0x999999, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccccc, 0xffffff, 0xcccccc, 0xcccccc, 0xcccccc, 0x999999, 0x999999, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccccc, 0xffffff, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccccc, 0xcccccc, 0xffffff, 0x999999, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0x999999, 0xcccccc, 0x999999, 0xcccc99, 0x999999, 0xcccccc, 0xffffff, 0xffffff, 0x999999, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 
  0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0x999999, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99, 0xcccc99
};
#endif
